package com.gl.documentmanagement.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.gl.documentmanagement.model.DocManagement;
import com.gl.documentmanagement.model.Document;
import com.gl.documentmanagement.model.DocumentData;
import com.gl.documentmanagement.model.MetadataInfo;
import com.gl.documentmanagement.service.DocManagementService;

import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@RestController
@RequestMapping("/docs")
public class DocManagementController {

	private static final Logger logger = LogManager.getLogger(DocManagementController.class);

	private DocManagementService docManagementService;

	@Autowired
	public DocManagementController(DocManagementService docManagementService) {
		this.docManagementService = docManagementService;	
	}

	@RequestMapping("/{docName}")
	//@HystrixCommand(fallbackMethod = "fallbackCatalog", commandKey = "doSomethingKey")
	public Document getment(@PathVariable("docName") String docName) {
		DocumentData documentData = docManagementService.getDocInfo(docName);
		MetadataInfo metadataInfo = docManagementService.getMetaInfo(documentData.getDocId());
		return new Document(documentData.getDocId(), documentData.getDocName(), documentData.getDocLocation(), metadataInfo.getDocType(), metadataInfo.getDocSize()); 
	}
	
	public CatalogItem fallbackCatalog(@PathVariable("userId") String userId)
	{
		logger.info("calling fallback for movieCatalog");
		return new CatalogItem("0", "No Data", "No description", 0);
	}


	@PostMapping(value = "/add")
	public void addMovieInfo(@RequestBody CatalogItem catalog){
		MovieInfo movieInfo = new MovieInfo();
		movieInfo.setMovieId(catalog.getMovieID());
		movieInfo.setDescription(catalog.getDesc());
		movieInfo.setName(catalog.getName());
		movieCatalogService.addMovieInfo(movieInfo);
		logger.info("movie added ");

		Ratings ratings = new Ratings();
		ratings.setMovieId(catalog.getMovieID());
		ratings.setRating(catalog.getRating());
		movieCatalogService.addRating(ratings);
		logger.info("rating added ");
	}


}
